---
import Layout from '~/layouts/PageLayout.astro';
import Hero from '~/components/widgets/Hero.astro';
import Features2 from '~/components/widgets/Features2.astro';
import Steps from '~/components/widgets/Steps.astro';
import BlogLatestPosts from '~/components/widgets/BlogLatestPosts.astro';
import FAQs from '~/components/widgets/FAQs.astro';
import CallToAction from '~/components/widgets/CallToAction.astro';
import Button from '~/components/ui/Button.astro';
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';
import { findImage } from '~/utils/images';
import YAML from 'yaml';
import fs from 'fs';
import path from 'path';

// Load site settings and homepage content
const settingsPath = path.join(process.cwd(), 'src/content/site-settings.yaml');
const settings = YAML.parse(fs.readFileSync(settingsPath, 'utf8'));
const homePagePath = path.join(process.cwd(), 'src/content/home-page/content.yaml');
const homePageContent = YAML.parse(fs.readFileSync(homePagePath, 'utf8'));

// Load content collections - filter for published items
const allServices = await getCollection('services_page_items');
const allFaqs = await getCollection('faqs_page_items');
const allTrustBadges = await getCollection('site_settings_trust_badges');

// Filter and sort
const services = allServices.filter((s) => s.data.published).sort((a, b) => a.data.order - b.data.order);
const faqs = allFaqs.filter((f) => f.data.published).sort((a, b) => a.data.order - b.data.order);
const trustBadges = allTrustBadges.filter((t) => t.data.published).sort((a, b) => a.data.order - b.data.order);

// Resolve badge images dynamically
const trustBadgesWithImages = await Promise.all(
  trustBadges.map(async (badge) => ({
    ...badge,
    resolvedLogoLight: await findImage(badge.data.logo_light),
    resolvedLogoDark: await findImage(badge.data.logo_dark),
  }))
);

// Get first 4 FAQs for homepage
const homepageFaqs = faqs.slice(0, 4);

// Debug - log what we're getting
console.log('Services loaded:', services.length);
console.log('FAQs loaded:', faqs.length);
console.log('Trust badges loaded:', trustBadges.length);

const metadata = {
  title: settings.site.name,
  ignoreTitleTemplate: true,
};
---

<Layout metadata={metadata}>
  <!-- Site Name -->
  <div class="text-center pt-8 pb-0">
    <h1 class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading">
      {settings.site.name}
    </h1>
  </div>

  <!-- Hero Widget -->
  <Hero
    noSpacer={true}
    tagline=""
    actions={[
      {
        variant: 'primary',
        text: homePageContent.ctas.primary.text,
        href: homePageContent.ctas.primary.link,
        icon: 'tabler:calendar',
      },
    ]}
    image={{
      src: homePageContent.hero.image,
      alt: 'Hero Image',
    }}
  >
    <Fragment slot="title">
      {homePageContent.hero.text}
    </Fragment>

    <Fragment slot="subtitle">
      <span class="font-semibold">{homePageContent.hero.title}</span>
      <br />
      <span class="text-muted">{homePageContent.hero.subtitle}</span>
    </Fragment>
  </Hero>

  <!-- Secondary CTA -->
  <div class="text-center py-8">
    <Button
      text={homePageContent.ctas.secondary.text}
      href={homePageContent.ctas.secondary.link}
      variant="secondary"
      class="w-auto"
    />
  </div>

  <!-- Trust Badges -->
  <section class="py-12">
    <div class="max-w-6xl mx-auto px-4 sm:px-6">
      <div class="text-center mb-8">
        <p class="text-base text-muted dark:text-slate-400">Professional accreditations and memberships</p>
      </div>
      <div class="flex flex-col sm:flex-row sm:flex-wrap justify-center items-center gap-6 sm:gap-8 md:gap-12">
        {
          trustBadgesWithImages.map((badge) => (
            <div class="flex items-center gap-3 w-64 sm:w-auto">
              {badge.resolvedLogoLight && (
                <Image
                  src={badge.resolvedLogoLight}
                  alt={badge.data.alt}
                  class="h-12 w-auto dark:hidden flex-shrink-0"
                  width={48}
                  height={48}
                />
              )}
              {badge.resolvedLogoDark && (
                <Image
                  src={badge.resolvedLogoDark}
                  alt={badge.data.alt}
                  class="h-12 w-auto hidden dark:block flex-shrink-0"
                  width={48}
                  height={48}
                />
              )}
              <span class="text-sm font-medium text-gray-700 dark:text-gray-300 text-center flex-1">
                {badge.data.display_text}
              </span>
            </div>
          ))
        }
      </div>
    </div>
  </section>

  <!-- How it Works -->
  <Steps
    title={homePageContent.sections.how_it_works}
    items={homePageContent.steps.map((step, index) => ({
      title: `Step ${index + 1}`,
      description: step.text,
      icon: index === 0 ? 'tabler:message-circle' : index === 1 ? 'tabler:clipboard-check' : 'tabler:bulb',
    }))}
  />

  <!-- Services -->
  <Features2
    title={homePageContent.sections.services}
    subtitle=""
    items={services.length > 0
      ? services.map((service) => ({
          title: service.data.title,
          description: service.data.description,
          icon: service.data.icon || 'tabler:point',
          callToAction: {
            text: 'Learn more',
            href: `/services#${service.data.anchor}`,
          },
        }))
      : []}
  />

  <!-- Deep CTA -->
  <CallToAction
    title=""
    subtitle={homePageContent.ctas.deep.lead_text}
    actions={[
      {
        variant: 'primary',
        text: homePageContent.ctas.deep.text,
        href: homePageContent.ctas.deep.link,
        icon: 'tabler:message-circle',
      },
    ]}
  />

  <!-- Blog -->
  <BlogLatestPosts
    title={homePageContent.sections.blog}
    information={homePageContent.sections.blog_subtitle}
    count={4}
  />

  <!-- FAQs -->
  <FAQs
    title={homePageContent.sections.faqs}
    items={homepageFaqs.length > 0
      ? homepageFaqs.map((faq) => ({
          title: faq.data.question,
          description: faq.data.answer,
        }))
      : []}
  />

  <!-- More FAQs Button -->
  {
    faqs.length > 4 && (
      <div class="text-center py-4 mb-8">
        <Button text="More FAQs" href="/faq" variant="secondary" class="w-auto" />
      </div>
    )
  }
</Layout>
