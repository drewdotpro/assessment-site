import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// ES module equivalent of __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Get environment variables
const WEBSITE_ID = process.env.WEBSITE_ID;
const ASSESSMENTS_URL = process.env.ASSESSMENTS_URL || 'http://localhost:4321';
const ADHD_URL = process.env.ADHD_URL || 'http://localhost:4321';
const AUTISM_URL = process.env.AUTISM_URL || 'http://localhost:4321';

// Validate required environment variables
if (!WEBSITE_ID) {
  console.error('‚ùå ERROR: WEBSITE_ID environment variable is required');
  console.error('   Use: WEBSITE_ID=assessments npm run dev:assessments');
  process.exit(1);
}

if (!['assessments', 'adhd', 'autism'].includes(WEBSITE_ID)) {
  console.error(`‚ùå ERROR: Invalid WEBSITE_ID "${WEBSITE_ID}"`);
  console.error('   Must be: assessments, adhd, or autism');
  process.exit(1);
}

// Site configuration
const siteConfig = {
  assessments: {
    mediaFolder: 'src/assets/images/assessments',
    publicFolder: '~/assets/images/assessments',
    url: ASSESSMENTS_URL,
  },
  adhd: {
    mediaFolder: 'src/assets/images/adhd',
    publicFolder: '~/assets/images/adhd',
    url: ADHD_URL,
  },
  autism: {
    mediaFolder: 'src/assets/images/autism',
    publicFolder: '~/assets/images/autism',
    url: AUTISM_URL,
  },
};

const config = siteConfig[WEBSITE_ID];

// Read template
console.log(`\nüîß Generating CMS config for: ${WEBSITE_ID}`);
console.log(`   URL: ${config.url}`);
console.log(`   Media: ${config.mediaFolder}\n`);

const templatePath = path.join(__dirname, '../public/admin/config.template.yml');
let template = fs.readFileSync(templatePath, 'utf8');

// Strip out the template header (everything before "backend:")
const backendIndex = template.indexOf('backend:');
if (backendIndex === -1) {
  console.error('‚ùå ERROR: Could not find "backend:" in template file');
  process.exit(1);
}
const templateBody = template.substring(backendIndex);

// Create auto-generated warning header
const generationTime = new Date().toISOString();
const autoGeneratedHeader = `# ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è AUTO-GENERATED FILE - DO NOT EDIT ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
#
# Generated from: public/admin/config.template.yml
# Generated for: ${WEBSITE_ID}
# Generated at: ${generationTime}
#
# To modify CMS configuration, edit public/admin/config.template.yml
#
# ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è ALL CHANGES TO THIS FILE WILL BE OVERWRITTEN ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è

`;

// Replace placeholders in template body
let processedConfig = templateBody.replace(/\{\{WEBSITE_ID\}\}/g, WEBSITE_ID);
processedConfig = processedConfig.replace(/\{\{MEDIA_FOLDER\}\}/g, config.mediaFolder);
processedConfig = processedConfig.replace(/\{\{PUBLIC_FOLDER\}\}/g, config.publicFolder);
processedConfig = processedConfig.replace(/\{\{SITE_URL\}\}/g, config.url);

// Combine header + processed config
const finalConfig = autoGeneratedHeader + processedConfig;

// Write to public/admin/config.yml
const configPath = path.join(__dirname, '../public/admin/config.yml');
fs.writeFileSync(configPath, finalConfig, 'utf8');

console.log(`‚úÖ CMS config generated: public/admin/config.yml\n`);
